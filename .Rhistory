library(xml)
install.packages("xml")
library(xml)
library(XML)
install.packages("XML")
install.packages("XML")
fileurl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileURL,useIntegral=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileurl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileURL,useIntegral=TRUE)
doc <- xmlTreeParse(fileurl,useIntegral=TRUE)
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
---
title: "R Notebook - Getting and Cleaning Data"
output:
html_notebook:
toc: TRUE
toc_float: TRUE
theme: united
author: Jason Seto
---
This notebook was created to work through the examples and problems for getting and cleaning data
#Week
##Lesson
###Slide
---
#Week 1
##Reading XML
<!-- install.packages("XML") -->
```{r}
library(XML)
```
You can pull XML using the XML package in R. The code below accesses the w3schools site and pulls the breakfast node from the XML
1. Load the package
2. Give it a URL
3. Load it into R Memory
4. Rootnode -- the wrapper element for the entire document
```{r}
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
```
This tells us that we get five different names in the rootnote (all related to food)
```{r}
names(rootNode)
```
###Directly access parts of the XML
If I want to pull the first food element
```{r}
rootNode[[1]]
```
Now if I want to keep drilling down, you can just subset by adding an additional element (in this case 1)
```{r}
rootNode[[1]][[1]]
```
###Programatically extract various parts of the xml
```{r tidy=TRUE}
xmlSApply(rootNode,xmlValue)
```
###XPath
If you want to extract some of the XML document you can use the XPath language
Link: www.stat.berkeley.edu/~statcur/Workshop2/Presentations/XML.pdf
Some basic commands:
XPath                   Description
------------            ------------
/node                   Top Level Node
//node                  Node at any level
node[@attr_name]        Node with any attribute name
node[@attr-name='bob']  Node with attribute name attr-name = bob
###Get Items and menu prices
The xpathSApply command pulls from:
* rootnode - The whole XML
* //name   - which is the node with the "Name" header
* xmlvalue - the type of data you are pulling
```{r}
xpathSApply(rootNode,"//name", xmlValue)
```
Now try the same thing for price
```{r}
xpathSApply(rootNode,"//price", xmlValue)
```
###ESPN Page
http://www.espn.com/nfl/team/_/name/bal/baltimore-ravens
1. Right click on page
2. View Source
3. It's an extensive HTML
* Trying to pull scores against different teams
1. Load URL
2. Parse as HTML (note that it's slightly different from XML and you can see HTML at the top)
3. Use the xPathSApply to pull out
```{r}
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
```
```{r}
a <- "http://sports.yahoo.com/nfl/scoreboard/"
b <- htmlTreeParse(fileURL, useInternalNodes =TRUE)
scores <- xpathSApply(doc, "//li[@id='scoreboard-group-2']",class="score")
scores
```
//*[@id="scoreboard-group-2"]/div/ul/li[1]/div/a/div/div[2]/div[1]/ul/li[2]/div[2]/div/span[1]
## Reading in JSON
Javascript Object Notation
* Lightweight data storage language
* Data stored as numbers, strings, booleans, and objects
https://api.github.com/users/jtleek/repos
### JsonLite
install.packages("httr")
library(httr)
set_config(config(ssl_verifypeer = 0L))
```{r}
library(jsonlite)
```
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
install.packages("XML")
install.packages("XML")
library(XML)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
names(rootNode)
rootNode[[1]]
xpathSApply(rootNode,"//name", xmlValue)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("curl")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris,pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
DF = data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3),z=rnorm(9))
head(DF,3)
DF = data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3),z=rnorm(9))
library(data.table)
install.packages('data.table)
install.packages('data.table')
library(data.table)
install.package('data.table')
install.packages('data.table')
library(data.table)
DF = data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3),z=rnorm(9))
head(DF,3)
DF = data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3),z=rnorm(9))
head(DF,3)
tables()
DT[2,]
DT = data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3),z=rnorm(9))
head(DF,3)
tables()
DT[2,]
head(Dt,3)
head(DT,3)
DT[DT$y=="a"]
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url=fileURL,destfile="NGAP.xlsx")
setwd("~/Github/Kelburn_Repository")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url=fileURL,destfile="NGAP.xlsx")
NGAP <- system.file("C:/Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx")
head(NGAP)
NGAP <- system.file("C:/Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx")
head(NGAP)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url=fileURL,destfile="Test.xlsx")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xls"
download.file(url=fileURL,destfile="Test.xls")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xls"
download.file(url=fileURL,destfile="Test.xls")
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xls"
download.file(url=fileURL,destfile="Test.xls")
NGAP <- system.file("C:/Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx")
head(NGAP)
getSheetNames(system.file("NGAP.xlsx", package = "openxlsx"))
library("openxlsx")
getSheetNames(system.file("NGAP.xlsx", package = "openxlsx"))
getSheetNames(system.file("C:/Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx"))
getSheetNames(system.file("/Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx"))
getSheetNames(system.file("Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx"))
setwd("~/Github/Kelburn_Repository")
getSheetNames(system.file("Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx"))
getSheetNames(system.file("Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx"))
NGAP <- system.file("C:/Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx")
getSheetNames(system.file(NGAP, package = "openxlsx"))
getSheetNames(system.file(NGAP.xlsx, package = "openxlsx"))
getSheetNames(system.file("NGAP.xlsx", package = "openxlsx"))
NGAP <- system.file("C:/Users/jseto/Documents/GitHub/Kelburn_Repository/NGAP.xlsx", package = "openxlsx")
writeData(NGAP , df, colNames=FALSE) ## write data.frame
writeData(NGAP,"NGAP", df, colNames=TRUE) ## write data.frame
writeData("NGAP.xlsx","NGAP", df, colNames=TRUE) ## write data.frame
read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = NULL, cols = NULL, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
NGAP<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = NULL, cols = NULL, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
View(NGAP)
NGAP<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = [18-23], cols = [7-15], check.names = FALSE,
NGAP<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = (18-23), cols = (7-15), check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
sum(dat$Zip*dat$Ext,na.rm=T)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = (18-23), cols = (7-15), check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(dat$Zip*dat$Ext,na.rm=T)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = (18-23), cols = (7-15), check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
sum(dat$Zip*dat$Ext,na.rm=T)
summary(dat)
str(dat)
head(dat)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = (18-23), cols = (7-15), check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = NA, cols = NA, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = NA, cols = NA, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = NULL, cols = NULL, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
sum(dat$Zip*dat$Ext,na.rm=T)
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = NULL, cols = NULL, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
head(dat)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = [18,23], cols = [7,15], check.names = FALSE,
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = [18,23], cols = [G,O], check.names = FALSE,
```{r}
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = (18,23), cols = (G,O), check.names = FALSE,
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = (18,23), cols = (7,15), check.names = FALSE,
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = (18-23), cols = (7-15), check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
dat<- read.xlsx("NGAP.xlsx", sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, rows = 18:23, cols = 7:15, check.names = FALSE,
namedRegion = NULL, na.strings = "NA", fillMergedCells = FALSE)
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
library("excel")
install.packages("excel")
sum(dat$Zip*dat$Ext,na.rm=T)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
library("xmlTreeParse")
install.packages("xmlTreeParse")
library("xmlTreeParse")
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
library("xmlTreeParse")
install.packages("xmlTreeParse")
dbinom(4, size=12, prob=0.2)
dbinom(0, size=12, prob=0.2) +
dbinom(1, size=12, prob=0.2) +
dbinom(2, size=12, prob=0.2) +
dbinom(3, size=12, prob=0.2) +
dbinom(4, size=12, prob=0.2)
pbinom(4,size=12,prob=.2)
